version: '3.8'

services:
  # Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=rehearsal_scheduler
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=developmentsecret
      - JWT_EXPIRES_IN=7d
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./:/app
      - /app/node_modules
    networks:
      - app-network
    restart: unless-stopped

  # Frontend React application
  client:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=rehearsal_scheduler
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped

# Docker networks
networks:
  app-network:
    driver: bridge

# Docker volumes
volumes:
  postgres-data:
  redis-data:
